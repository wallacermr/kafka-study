version: '3.7'
services:
#    zookeeper:
#        image: confluentinc/cp-zookeeper:7.1.3
#        hostname: zookeeper
#        container_name: zookeeper.dev
#        ports:
#            - "2181:2181"
#        environment:
#            ZOOKEEPER_CLIENT_PORT: 2181
#            ZOOKEEPER_TICK_TIME: 2000
#        volumes:
#            - zookeeper-dev:/data
#            - zookeeper-dev:/datalog
#        networks:
#            - study
#
#
#    kafka:
#        image: confluentinc/cp-server:7.1.3
#        hostname: kafka
#        container_name: kafka.dev
#        depends_on:
#            - zookeeper
#        ports:
#            - "9092:9092"
#            - "9101:9101"
#        environment:
#            KAFKA_BROKER_ID: 1
#            KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
#            KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
#            KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
#            KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
#            KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
#            KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
#            KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
#            KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
#            KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
#            KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
#            KAFKA_JMX_PORT: 9101
#            KAFKA_JMX_HOSTNAME: localhost
#            CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: kafka:29092
#            CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
#            CONFLUENT_METRICS_ENABLE: 'true'
#            CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'
#        volumes:
#            - kafka-dev:/var/lib/kafka/data
#        networks:
#            - study
#
#
#    kafka-ui:
#        image: provectuslabs/kafka-ui:master
#        container_name: kafka-ui.dev
#        hostname: kafka-ui
#        restart: always
#        depends_on:
#            - zookeeper
#            - kafka
#        ports:
#            - "8180:8080"
#        environment:
#            KAFKA_CLUSTERS_0_NAME: local
#            KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
#            KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
#            KAFKA_CLUSTERS_0_JMXPORT: 9993
#        networks:
#            - study
#    kong:
#        image: kong:3.0
#        platform: "linux/arm64"
#        container_name: kong
#        volumes:
#            - ./kong.yml:/usr/local/kong/declarative/kong.yml
#        environment:
#            KONG_DATABASE: 'off'
#            KONG_PROXY_ACCESS_LOG: /dev/stdout
#            KONG_ADMIN_ACCESS_LOG: /dev/stdout
#            KONG_PROXY_ERROR_LOG: /dev/stderr
#            KONG_ADMIN_ERROR_LOG: /dev/stderr
#            KONG_LOG_LEVEL: warn
#            KONG_DECLARATIVE_CONFIG: /usr/local/kong/declarative/kong.yml
#            KONG_ADMIN_LISTEN: 0.0.0.0:8001, 0.0.0.0:8444 ssl
#            KONG_PROXY_LISTEN: 0.0.0.0:8000, 0.0.0.0:8443 ssl, 0.0.0.0:9080 http2, 0.0.0.0:9081 http2 ssl
#        ports:
#            - "8000:8000"
#            - "8443:8443"
#            - "8001:8001"
#            - "8444:8444"
#        networks:
#            - study




#    kong-database:
#        image: postgres:15.4
#        container_name: kong-database
#        environment:
#            POSTGRES_DB: kong
#            POSTGRES_USER: kong
#            POSTGRES_PASSWORD: kong
#        volumes:
#            - kong-dev:/var/lib/postgresql/data
#
#    kong:
#        image: kong:3.0
#        container_name: kong
#        depends_on:
#            - kong-database
#        ports:
#            - "8000:8000"  # Proxy port
#            - "8443:8443"  # Proxy SSL port
#            - "8001:8001"  # Admin API port
#            - "8444:8444"  # Admin API SSL port
#        environment:
#            KONG_DATABASE: postgres
#            KONG_PG_HOST: kong-database
#            KONG_PG_USER: kong
#            KONG_PG_PASSWORD: kong
#            KONG_PG_DATABASE: kong
#            KONG_PORT_MAPS: '8000:80,8443:443'
#        entrypoint: [ "kong", "reload" ]
#        command: ["kong", "migrate", "up"]






networks:
    study:
        driver: bridge
        external: true

volumes:
    zookeeper-dev:
    kafka-dev:
    kong-dev:
    kong-database-data: